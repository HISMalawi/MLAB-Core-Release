{"version":3,"file":"js/415.7b518c13.js","mappings":"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","sources":["webpack://IBLISReception/./src/views/IdentifierResult.vue?b13b","webpack://IBLISReception/./src/views/IdentifierResult.vue","webpack://IBLISReception/./src/views/IdentifierResult.vue?34d9"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, unref as _unref, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, createBlock as _createBlock, createCommentVNode as _createCommentVNode } from \"vue\"\n\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport {\n    IonList,\n    IonLabel,\n    IonTitle,\n    IonPage,\n    IonHeader,\n    IonToolbar,\n    IonContent,\n    IonFooter,\n    IonButton,\n    IonItem\n} from \"@ionic/vue\"\nimport { computed, onMounted, ref, watch } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport Orders from \"@/composables/orders\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Client } from \"@/composables/client\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { modalController } from \"@ionic/core\";\nimport router from \"@/router\";\nimport PrintService from \"@/services/print_service\";\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'IdentifierResult',\n  setup(__props) {\n\nconst client = Client()\n\nconst route = useRoute()\n\nconst { searchResult } = Orders()\n\nconst clientID = ref('')\n\nconst orderStatus = ref<string>('')\n\nconst options = ref<Option[]>([\n    { label: 'Order Id', value: '-' },\n    { label: 'Tracking Number', value: '-' },\n    { label: 'Accession Number', value: '-' },\n    { label: 'Patient Name', value: '-' },\n    { label: 'Specimen Type', value: '-' },\n    { label: 'Test(s) Ordered', value: '-' },\n    { label: 'Specimen Status', value: '-' },\n])\n\nconst identifier = `${route.params.identifier || 'Unknown ID'}`\n\nconst orderIsset = computed(() => Object.keys(searchResult.value).length ? true : false)\n\n\nfunction loadOrder() {\n    Orders().searchbyID(identifier)\n}\n\nasync function changeSpecimenStatus(status: string): Promise<void> {\n\n    const res = await client.putJson(`order_statuses/${status}`, {\n        order_id: options.value[0].value\n    })\n\n    if (res?.ok) {\n        toastSuccess(`Specimen ${status} successfully!`)\n        router.push('/tests')\n    }\n\n}\n\nfunction addTest() {\n    MultiStepPopupForm([\n        {\n            id: \"test_types\",\n            helpText: \"Select test types\",\n            type: FieldType.TT_MULTIPLE_SELECT,\n            config: {\n                showKeyboard: true\n            },\n            computedValue: (val: Option[], f: any) => {\n                return {\n                    order_id: searchResult.value?.order_id || 0,\n                    tests: val.map((v: Option) => {\n                        return {\n                            specimen: v.value,\n                            test_type: v.label\n                        }\n                    })\n                }\n            },\n            options: async () => {\n                const [test] = searchResult.value?.tests || []\n                if (!test) return []\n                const res: any = await client.getJson('specimen/test_types', {\n                    'specimen_id': test.specimen_id as number\n                })\n                if (!res?.ok) return []\n                return res.data.filter(\n                    (test: string) => !searchResult.value.tests.map((r: any) => r.test_type).includes(test)\n                ).map((testType: string) => ({\n                    label: testType,\n                    value: test.specimen_id\n                }));\n            },\n            validation: (val: Option) => Validation.required(val)\n        }],\n        async (_: any, payload: any) => {\n            const req: any = await client.postJson('orders/add_test_to_order', payload.test_types)\n            if (!req.ok) return toastWarning(req.error)\n            modalController.getTop().then((v: any) => v && modalController.dismiss())\n            loadOrder()\n        }, null)\n}\n\nwatch(searchResult, async (data) => {\n    if (Object.keys(data).length) {\n\n        const res = await client.getJson(`orders/${data.order_id}`)\n\n        orderStatus.value = res?.data.order_status\n\n        clientID.value = data.client_id\n        const [test] = data.tests\n        options.value = [\n            { label: 'Order Id', value: data.order_id },\n            { label: 'Tracking Number', value: data.tracking_number },\n            { label: 'Accession Number', value: data.accession_number },\n            { label: 'Patient Name', value: `${data.first_name} ${data.last_name}` },\n            { label: 'Specimen Type', value: test.specimen },\n            { label: 'Test(s) Ordered', value: data.tests.map((t: any) => t.test_type).join(', ') },\n        ]\n    }\n}, { deep: true, immediate: true })\n\nconst printAccessNumber = (): void => {\n    const printService = new PrintService()\n    const { value: accession_number = '-' } = options.value.find((option: { label: string; }) => option.label === 'Accession Number') || {};\n    printService.writeLbl('printout/accession_number', { accession_number }, `${accession_number}.lbl`);\n}\n\nonMounted(() => {\n    if (!orderIsset.value) loadOrder()\n})\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(_unref(IonHeader), null, {\n        default: _withCtx(() => [\n          _createVNode(_unref(IonToolbar), null, {\n            default: _withCtx(() => [\n              _createVNode(_unref(IonTitle), { class: \"his-lg-text\" }, {\n                default: _withCtx(() => [\n                  _createElementVNode(\"b\", null, _toDisplayString(identifier))\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_unref(IonContent), null, {\n        default: _withCtx(() => [\n          _createVNode(_unref(IonList), null, {\n            default: _withCtx(() => [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(options.value, (option, index) => {\n                return (_openBlock(), _createBlock(_unref(IonItem), {\n                  class: \"his-md-text\",\n                  key: index\n                }, {\n                  default: _withCtx(() => [\n                    _createVNode(_unref(IonLabel), null, {\n                      default: _withCtx(() => [\n                        _createTextVNode(_toDisplayString(option.label), 1)\n                      ]),\n                      _: 2\n                    }, 1024),\n                    _createVNode(_unref(IonLabel), { slot: \"end\" }, {\n                      default: _withCtx(() => [\n                        _createElementVNode(\"b\", null, _toDisplayString(option.value), 1)\n                      ]),\n                      _: 2\n                    }, 1024)\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_unref(IonFooter), null, {\n        default: _withCtx(() => [\n          _createVNode(_unref(IonToolbar), {\n            color: \"default\",\n            style: {\"padding\":\"5px\"}\n          }, {\n            default: _withCtx(() => [\n              _createVNode(_unref(IonButton), {\n                \"router-link\": \"/home\",\n                size: \"large\"\n              }, {\n                default: _withCtx(() => _cache[2] || (_cache[2] = [\n                  _createTextVNode(\" Cancel \")\n                ])),\n                _: 1\n              }),\n              _createVNode(_unref(IonButton), {\n                size: \"large\",\n                slot: \"end\",\n                onClick: printAccessNumber\n              }, {\n                default: _withCtx(() => _cache[3] || (_cache[3] = [\n                  _createTextVNode(\" Print Accession Number \")\n                ])),\n                _: 1\n              }),\n              _createVNode(_unref(IonButton), {\n                onClick: addTest,\n                disabled: !orderIsset.value,\n                slot: \"end\",\n                size: \"large\"\n              }, {\n                default: _withCtx(() => _cache[4] || (_cache[4] = [\n                  _createTextVNode(\" Add test \")\n                ])),\n                _: 1\n              }, 8, [\"disabled\"]),\n              (orderStatus.value !== 'specimen-accepted' && orderStatus.value !== 'specimen-rejected')\n                ? (_openBlock(), _createBlock(_unref(IonButton), {\n                    key: 0,\n                    onClick: _cache[0] || (_cache[0] = ($event: any) => (changeSpecimenStatus('accepted'))),\n                    disabled: !orderIsset.value,\n                    slot: \"end\",\n                    size: \"large\",\n                    color: \"success\"\n                  }, {\n                    default: _withCtx(() => _cache[5] || (_cache[5] = [\n                      _createTextVNode(\" Accept \")\n                    ])),\n                    _: 1\n                  }, 8, [\"disabled\"]))\n                : _createCommentVNode(\"\", true),\n              (orderStatus.value !== 'specimen-accepted' && orderStatus.value !== 'specimen-rejected')\n                ? (_openBlock(), _createBlock(_unref(IonButton), {\n                    key: 1,\n                    onClick: _cache[1] || (_cache[1] = ($event: any) => (changeSpecimenStatus('rejected'))),\n                    disabled: !orderIsset.value,\n                    slot: \"end\",\n                    size: \"large\",\n                    color: \"danger\"\n                  }, {\n                    default: _withCtx(() => _cache[6] || (_cache[6] = [\n                      _createTextVNode(\" Reject \")\n                    ])),\n                    _: 1\n                  }, 8, [\"disabled\"]))\n                : _createCommentVNode(\"\", true)\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","<template>\n    <ion-page>\n        <ion-header>\n            <ion-toolbar>\n                <ion-title class=\"his-lg-text\">\n                    <b>{{ identifier }}</b>\n                </ion-title>\n            </ion-toolbar>\n        </ion-header>\n        <ion-content>\n            <ion-list>\n                <ion-item class=\"his-md-text\" v-for=\"(option, index) in options\" :key=\"index\">\n                    <ion-label>\n                        {{ option.label }}\n                    </ion-label>\n                    <ion-label slot=\"end\">\n                        <b>{{ option.value }}</b>\n                    </ion-label>\n                </ion-item>\n            </ion-list>\n        </ion-content>\n        <ion-footer>\n            <ion-toolbar color=\"default\" style=\"padding: 5px;\">\n                <ion-button router-link=\"/home\" size=\"large\">\n                    Cancel\n                </ion-button>\n                <ion-button size=\"large\" slot=\"end\" @click=\"printAccessNumber\">\n                    Print Accession Number\n                </ion-button>\n                <ion-button @click=\"addTest\" :disabled=\"!orderIsset\" slot=\"end\" size=\"large\">\n                    Add test\n                </ion-button>\n                <ion-button v-if=\"orderStatus !== 'specimen-accepted' && orderStatus !== 'specimen-rejected'\"\n                    @click=\"changeSpecimenStatus('accepted')\" :disabled=\"!orderIsset\" slot=\"end\" size=\"large\"\n                    color=\"success\">\n                    Accept\n                </ion-button>\n                <ion-button v-if=\"orderStatus !== 'specimen-accepted' && orderStatus !== 'specimen-rejected'\"\n                    @click=\"changeSpecimenStatus('rejected')\" :disabled=\"!orderIsset\" slot=\"end\" size=\"large\"\n                    color=\"danger\">\n                    Reject\n                </ion-button>\n            </ion-toolbar>\n        </ion-footer>\n    </ion-page>\n</template>\n<script setup lang=\"ts\">\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport {\n    IonList,\n    IonLabel,\n    IonTitle,\n    IonPage,\n    IonHeader,\n    IonToolbar,\n    IonContent,\n    IonFooter,\n    IonButton,\n    IonItem\n} from \"@ionic/vue\"\nimport { computed, onMounted, ref, watch } from \"vue\";\nimport { useRoute } from \"vue-router\";\nimport Orders from \"@/composables/orders\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Client } from \"@/composables/client\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { modalController } from \"@ionic/core\";\nimport router from \"@/router\";\nimport PrintService from \"@/services/print_service\";\n\nconst client = Client()\n\nconst route = useRoute()\n\nconst { searchResult } = Orders()\n\nconst clientID = ref('')\n\nconst orderStatus = ref<string>('')\n\nconst options = ref<Option[]>([\n    { label: 'Order Id', value: '-' },\n    { label: 'Tracking Number', value: '-' },\n    { label: 'Accession Number', value: '-' },\n    { label: 'Patient Name', value: '-' },\n    { label: 'Specimen Type', value: '-' },\n    { label: 'Test(s) Ordered', value: '-' },\n    { label: 'Specimen Status', value: '-' },\n])\n\nconst identifier = `${route.params.identifier || 'Unknown ID'}`\n\nconst orderIsset = computed(() => Object.keys(searchResult.value).length ? true : false)\n\n\nfunction loadOrder() {\n    Orders().searchbyID(identifier)\n}\n\nasync function changeSpecimenStatus(status: string): Promise<void> {\n\n    const res = await client.putJson(`order_statuses/${status}`, {\n        order_id: options.value[0].value\n    })\n\n    if (res?.ok) {\n        toastSuccess(`Specimen ${status} successfully!`)\n        router.push('/tests')\n    }\n\n}\n\nfunction addTest() {\n    MultiStepPopupForm([\n        {\n            id: \"test_types\",\n            helpText: \"Select test types\",\n            type: FieldType.TT_MULTIPLE_SELECT,\n            config: {\n                showKeyboard: true\n            },\n            computedValue: (val: Option[], f: any) => {\n                return {\n                    order_id: searchResult.value?.order_id || 0,\n                    tests: val.map((v: Option) => {\n                        return {\n                            specimen: v.value,\n                            test_type: v.label\n                        }\n                    })\n                }\n            },\n            options: async () => {\n                const [test] = searchResult.value?.tests || []\n                if (!test) return []\n                const res: any = await client.getJson('specimen/test_types', {\n                    'specimen_id': test.specimen_id as number\n                })\n                if (!res?.ok) return []\n                return res.data.filter(\n                    (test: string) => !searchResult.value.tests.map((r: any) => r.test_type).includes(test)\n                ).map((testType: string) => ({\n                    label: testType,\n                    value: test.specimen_id\n                }));\n            },\n            validation: (val: Option) => Validation.required(val)\n        }],\n        async (_: any, payload: any) => {\n            const req: any = await client.postJson('orders/add_test_to_order', payload.test_types)\n            if (!req.ok) return toastWarning(req.error)\n            modalController.getTop().then((v: any) => v && modalController.dismiss())\n            loadOrder()\n        }, null)\n}\n\nwatch(searchResult, async (data) => {\n    if (Object.keys(data).length) {\n\n        const res = await client.getJson(`orders/${data.order_id}`)\n\n        orderStatus.value = res?.data.order_status\n\n        clientID.value = data.client_id\n        const [test] = data.tests\n        options.value = [\n            { label: 'Order Id', value: data.order_id },\n            { label: 'Tracking Number', value: data.tracking_number },\n            { label: 'Accession Number', value: data.accession_number },\n            { label: 'Patient Name', value: `${data.first_name} ${data.last_name}` },\n            { label: 'Specimen Type', value: test.specimen },\n            { label: 'Test(s) Ordered', value: data.tests.map((t: any) => t.test_type).join(', ') },\n        ]\n    }\n}, { deep: true, immediate: true })\n\nconst printAccessNumber = (): void => {\n    const printService = new PrintService()\n    const { value: accession_number = '-' } = options.value.find((option: { label: string; }) => option.label === 'Accession Number') || {};\n    printService.writeLbl('printout/accession_number', { accession_number }, `${accession_number}.lbl`);\n}\n\nonMounted(() => {\n    if (!orderIsset.value) loadOrder()\n})\n</script>\n","import script from \"./IdentifierResult.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./IdentifierResult.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_defineComponent","__name","setup","__props","client","Client","route","useRoute","searchResult","Orders","clientID","ref","orderStatus","options","label","value","identifier","params","orderIsset","computed","Object","keys","length","loadOrder","searchbyID","async","changeSpecimenStatus","status","res","putJson","order_id","ok","toastSuccess","router","push","addTest","MultiStepPopupForm","id","helpText","type","FieldType","TT_MULTIPLE_SELECT","config","showKeyboard","computedValue","val","f","_searchResult$value","tests","map","v","specimen","test_type","_searchResult$value2","test","getJson","specimen_id","data","filter","r","includes","testType","validation","Validation","required","_","payload","req","postJson","test_types","toastWarning","error","modalController","getTop","then","dismiss","watch","order_status","client_id","tracking_number","accession_number","first_name","last_name","t","join","deep","immediate","printAccessNumber","printService","PrintService","find","option","writeLbl","onMounted","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","IonHeader","IonToolbar","IonTitle","class","_createElementVNode","_toDisplayString","IonContent","IonList","_createElementBlock","_Fragment","_renderList","index","IonItem","key","IonLabel","_createTextVNode","slot","IonFooter","color","style","IonButton","size","onClick","disabled","$event","_createCommentVNode","__exports__"],"sourceRoot":""}