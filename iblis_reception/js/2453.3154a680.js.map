{"version":3,"file":"js/2453.3154a680.js","mappings":"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","sources":["webpack://IBLISReception/./src/components/Keyboard/HisKbConfigurations.ts","webpack://IBLISReception/./src/helpers/form/MonthOptions.ts","webpack://IBLISReception/./src/helpers/form/MultifieldDateHelper.ts","webpack://IBLISReception/./src/utils/Form.ts","webpack://IBLISReception/./src/views/EditClient.vue?4986","webpack://IBLISReception/./src/views/EditClient.vue"],"sourcesContent":["/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"./MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean;\n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void;\n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''\n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n *\n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field\n * @param refDate\n * @returns\n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n\n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n\n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition\n        ? field.condition(f)\n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown\n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n\n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || Number(year) < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c))\n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && Number(year) > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of\n     * how data should appear on the summary\n     * @returns\n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText,\n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary,\n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val\n     * @returns\n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f)\n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = {\n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (!v) return [\"Age estimate is required\"]\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!`${v?.value}`.match(ageEstimateRegex) ){\n            return ['Not a valid age estimate']\n        }\n        const value = parseInt(`${v?.value||-1}`)\n        if (value < 0) {\n            return ['Please enter a valid number']\n        }\n        if (value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(value, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    )\n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","/**\n * E.g. \n *  payload: {\n *      first_name: {\n *          person: \"Andrew\"\n *      },\n *      last_name: {\n *          person: \"Mfune\"\n *      },\n *      gender: {\n *          person: \"F\"\n *      }\n *  }\n * \n *  tag: \"person\"\n * \n *  result: {\n *      person: {\n *          first_name: \"Andrew\",\n *          last_name: \"Mfune\",\n *          gender: \"F\"\n *      }\n *  }\n * @param payload \n * @param tag \n * @returns \n */\nexport function groupByTag(payload: Record<string, any>, tag: string) {\n    const data = Object.values(Object.values(payload))\n    const values: any = data.filter((data: any) => {\n            return data[tag] ? true : false\n        })\n        .reduce((finalPayload: any, val: any) => {\n            if (Array.isArray(val[tag])) {\n                finalPayload[tag] = val[tag]\n            } else {\n                finalPayload[tag] = {...finalPayload[tag],...val[tag]} \n            }\n            return finalPayload\n        }, {})\n    return values\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { onMounted, ref } from \"vue\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/helpers/form/MultifieldDateHelper\";\nimport { groupByTag } from \"@/utils/Form\";\nimport { useRoute } from \"vue-router\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'EditClient',\n  setup(__props) {\n\nconst client = Client();\nconst route = useRoute();\nconst nextField = ref(\"\");\nconst details = ref<any>({});\nconst fields = ref<Field[]>([]);\n\nconst givenNameField = () => {\n  return {\n    id: \"first_name\",\n    helpText: \"First name\",\n    type: FieldType.TT_TEXT,\n    defaultValue: () => details.value.first_name,\n    computedValue: (val: Option) => ({\n      person: { first_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst familyNameField = () => {\n  return {\n    id: \"last_name\",\n    helpText: \"Last name\",\n    defaultValue: () => details.value.last_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      person: { last_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst middleNameField = () => {\n  return {\n    id: \"middle_name\",\n    helpText: \"Middle name(Optional)\",\n    defaultValue: () => details.value.middle_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        person: { middle_name: val.value },\n      };\n    },\n  };\n};\n\nconst genderField = () => {\n  return {\n    id: \"sex\",\n    helpText: \"Gender\",\n    defaultValue: () => (details.value.sex == \"F\" ? \"Female\" : \"Male\"),\n    type: FieldType.TT_SELECT,\n    computedValue: (val: Option) => ({\n      person: { sex: val.value },\n    }),\n    validation: (val: Option) => Validation.required(val),\n    options: () => [\n      {\n        label: \"Female\",\n        value: \"F\",\n      },\n      {\n        label: \"Male\",\n        value: \"M\",\n      },\n    ],\n  };\n};\n\nconst birthdateField = () => {\n  const config = {\n    id: \"date_of_birth\",\n    summaryLabel: \"Date of Birth\",\n    helpText: \"Birth\",\n    defaultValue: () => details.value.date_of_birth,\n    required: true,\n    minDate: () => HisDate.estimateDateFromAge(100),\n    maxDate: () => HisDate.sessionDate(),\n    estimation: {\n      allowUnknown: true,\n      allowUnknownMonthDay: true,\n      estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD,\n    },\n    computeValue: (date: string, isEstimate: boolean) => {\n      return {\n        person: {\n          date_of_birth: date,\n          birth_date_estimated: isEstimate,\n        },\n      };\n    },\n  };\n  return generateDateFields(config);\n};\n\nconst physicalAddressField = () => {\n  return {\n    id: \"physical_address\",\n    helpText: \"Physical address\",\n    defaultValue: () =>\n      details.value.physical_address\n        ? details.value.physical_address\n        : \"Unknown\",\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      client_identifiers: {\n        physical_address: val.value,\n      },\n    }),\n    validation: (val: Option) => Validation.required(val),\n  };\n};\n\nconst externalPatientNumberField = () => {\n  return {\n    id: \"npid\",\n    helpText: \"External Patient Number (Option)\",\n    defaultValue: () => details.value.uuid,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        client_identifiers: {\n          npid: val?.value || \"\",\n        },\n      };\n    },\n  };\n};\n\nconst onFinish = (_: any, payload: any) => {\n  client\n    .putJson(`clients/${route.params.client_id}`, {\n      client: { id: route.params.client_id, uuid: details.value.uuid },\n      ...groupByTag(payload, \"person\"),\n      client_identifiers: [payload]\n    })\n    .then((res) => {\n      if (res?.ok) {\n        router.back();\n        return toastSuccess(\"Client updated successfully!\");\n      }\n      toastWarning(res?.error || \"An error occurred, please try again\");\n    })\n    .catch(() => toastDanger(ClientError.GENERAL_ERROR));\n};\n\nconst getClient = async () => {\n  const res = await client.getJson(`clients/${route.params.client_id}`);\n  details.value = res?.data;\n  if (res?.data) {\n    fields.value = [\n      givenNameField(),\n      middleNameField(),\n      familyNameField(),\n      genderField(),\n      ...birthdateField(),\n      physicalAddressField(),\n      externalPatientNumberField(),\n    ];\n  }\n};\n\nonMounted(async () => {\n  await getClient();\n});\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(TouchForm, {\n    fields: fields.value,\n    onFinish: onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (nextField.value = '')),\n    activeField: nextField.value\n  }, null, 8, [\"fields\", \"activeField\"]))\n}\n}\n\n})","import script from \"./EditClient.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./EditClient.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","label","value","EstimationFieldType","getYearField","id","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","async","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","data","proxyID","unload","v","toString","validation","c","required","StandardValidations","match","isNaN","Number","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","Service","getSessionDate","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","groupByTag","payload","tag","Object","values","filter","finalPayload","Array","isArray","_defineComponent","__name","setup","__props","client","Client","route","useRoute","nextField","details","fields","givenNameField","first_name","person","Validation","isName","familyNameField","last_name","middleNameField","middle_name","genderField","sex","birthdateField","date_of_birth","estimateDateFromAge","sessionDate","isEstimate","birth_date_estimated","physicalAddressField","physical_address","client_identifiers","externalPatientNumberField","uuid","npid","onFinish","putJson","params","client_id","then","res","ok","router","back","toastSuccess","toastWarning","error","catch","toastDanger","ClientError","GENERAL_ERROR","getClient","getJson","onMounted","_ctx","_cache","_openBlock","_createBlock","TouchForm","skipSummary","onOnIndex","$event","activeField","__exports__"],"sourceRoot":""}