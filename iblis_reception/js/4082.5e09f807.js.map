{"version":3,"file":"js/4082.5e09f807.js","mappings":"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","sources":["webpack://IBLISReception/./src/components/Keyboard/HisKbConfigurations.ts","webpack://IBLISReception/./src/components/Keyboard/KbLayouts.ts","webpack://IBLISReception/./src/utils/Form.ts","webpack://IBLISReception/./src/helpers/form/MonthOptions.ts","webpack://IBLISReception/./src/helpers/form/MultifieldDateHelper.ts","webpack://IBLISReception/./src/views/FindOrRegister.vue?98b1","webpack://IBLISReception/./src/views/FindOrRegister.vue"],"sourcesContent":["/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * E.g. \n *  payload: {\n *      first_name: {\n *          person: \"Andrew\"\n *      },\n *      last_name: {\n *          person: \"Mfune\"\n *      },\n *      gender: {\n *          person: \"F\"\n *      }\n *  }\n * \n *  tag: \"person\"\n * \n *  result: {\n *      person: {\n *          first_name: \"Andrew\",\n *          last_name: \"Mfune\",\n *          gender: \"F\"\n *      }\n *  }\n * @param payload \n * @param tag \n * @returns \n */\nexport function groupByTag(payload: Record<string, any>, tag: string) {\n    const data = Object.values(Object.values(payload))\n    const values: any = data.filter((data: any) => {\n            return data[tag] ? true : false\n        })\n        .reduce((finalPayload: any, val: any) => {\n            if (Array.isArray(val[tag])) {\n                finalPayload[tag] = val[tag]\n            } else {\n                finalPayload[tag] = {...finalPayload[tag],...val[tag]} \n            }\n            return finalPayload\n        }, {})\n    return values\n}","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"./MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ref } from \"vue\";\nimport { isEmpty } from \"lodash\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\"\nimport { EstimationFieldType, generateDateFields } from \"@/helpers/form/MultifieldDateHelper\"\nimport { groupByTag } from \"@/utils/Form\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'FindOrRegister',\n  setup(__props) {\n\nconst client = Client()\n\nconst nextField = ref('')\n\nconst givenNameField = () => {\n    return {\n        id: 'first_name',\n        helpText: 'First name',\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { first_name : val.value}\n        }),\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst familyNameField = () => {\n    return {\n        id: 'last_name',\n        helpText: \"Last name\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { last_name : val.value}\n        }),\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst middleNameField = () => {\n    return {\n        id: 'middle_name',\n        helpText: \"Middle name(Optional)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                person: { middle_name : val.value}\n            }\n        },\n    }\n}\n\nconst genderField = () => {\n    return  {\n        id: 'sex',\n        helpText: 'Gender',\n        type: FieldType.TT_SELECT,\n        computedValue: (val: Option) => ({\n            person: { sex : val.value}\n        }),\n        validation: (val: Option) => Validation.required(val),\n        options: () => ([\n            {\n                label: 'Female',\n                value: 'F'\n            },\n            {\n                label: 'Male',\n                value: 'M'\n            }\n        ])\n    }\n}\n\nconst birthdateField =  () => {\n    const config =  {\n        id: 'date_of_birth',\n        summaryLabel: 'Date of Birth',\n        helpText: 'Birth',\n        required: true,\n        minDate: () => HisDate.estimateDateFromAge(100),\n        maxDate: () => HisDate.sessionDate(),\n        estimation: {\n            allowUnknown: true,\n            allowUnknownMonthDay: true,\n            estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n        },\n        computeValue: (date: string, isEstimate: boolean) => {\n            return {\n                person: {\n                    date_of_birth: date,\n                    birth_date_estimated: isEstimate\n                }\n            }\n        }\n    }\n    return generateDateFields(config)\n}\n\nconst physicalAddressField = () => {\n    return {\n        id: \"physical_address\",\n        helpText: \"Physical address\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            client_identifiers: {\n                physical_address : val.value\n            }\n        }),\n        validation: (val: Option) => Validation.required(val)\n    }\n}\n\nconst externalPatientNumberField = () => {\n    return {\n        id: \"npid\",\n        helpText: \"External Patient Number (Option)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                client_identifiers: {\n                    npid: val?.value||''\n                }\n            }\n        }\n    }\n}\n\nconst searchResultsField = () => {\n    return {\n        id: 'results',\n        helpText: 'Search results',\n        type: FieldType.TT_PERSON_RESULT_VIEW,\n        dynamicHelpText: (form: any) => {\n            return `Search results for \"${form.first_name.value} ${form.last_name.value} | ${form.sex.label}\"`;\n        },\n        options: async (f: any) => {\n            const payload = {\n                'first_name': f.first_name.value,\n                'last_name': f.last_name.value,\n                'gender': f.sex.value\n            }\n            const res = await client.getJson('clients/search_dde', payload)\n            if (!res?.ok) {\n                toastWarning('Unable to find client')\n                return []\n            }\n            return res.data.map((person: any) => {\n                return {\n                    label: `${person.first_name} ${person.last_name} (${person.date_of_birth})`,\n                    value: person.client_id,\n                    other: {\n                        person,\n                        options: [\n                            { label: \"First name\", value: person.first_name},\n                            { label: \"Middle name\", value: person.middle_name},\n                            { label: \"Last name\", value: person.last_name},\n                            { label: \"Sex\", value: person.sex },\n                            { label: \"Birthdate\", value: person.date_of_birth},\n                            { label: \"Is birth estimated?\", value: person.birth_date_estimated  ? 'Yes' : 'No' }\n                        ]\n                    }\n                }\n            })\n        },\n        config: {\n            hiddenFooterBtns: [\n                'Clear',\n                'Next',\n                'Back',\n                'Finish'\n            ],\n            footerBtns: [\n                {\n                    name: 'Edit Search',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = 'first_name'\n                    }\n\n                },\n                {\n                    name: 'New Client',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = '_NEXT_FIELD_'\n                    }\n                },\n                {\n                    name: 'New Order',\n                    color: 'success',\n                    slot: 'end',\n                    state: {\n                        disabled: {\n                            default: () => true,\n                            onValue(_: any,form: any) {\n                                return isEmpty(form.results)\n                            }\n                        }\n                    },\n                    onClick: (form: any) => {\n                        return router.push(`/order/${form.results.value}`)\n                    }\n                }\n            ]\n        }\n    }\n}\n\nconst fields: Field[] = [\n    givenNameField(),\n    middleNameField(),\n    familyNameField(),\n    genderField(),\n    searchResultsField(),\n    ...birthdateField(),\n    physicalAddressField(),\n    externalPatientNumberField()\n]\n\nconst onFinish = (_: any, payload: any) => {\n    client.postJson('clients', {\n        client: { id: '', uuid: '' },\n        ...groupByTag(payload, 'person'),\n        ...groupByTag(payload, 'client_identifiers')\n    }).then(res => {\n        if (res?.ok) {\n            //TODO: Redirect to orders\n            router.push(`/order/${res.data.client_id}`)\n            return toastSuccess('Client created')\n        }\n        toastWarning(res?.error||'Unable to create')\n    }).catch(() => toastDanger(ClientError.GENERAL_ERROR))\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(TouchForm, {\n    fields: fields,\n    onFinish: onFinish,\n    skipSummary: true,\n    activeField: nextField.value\n  }, null, 8, [\"activeField\"]))\n}\n}\n\n})","import script from \"./FindOrRegister.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./FindOrRegister.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DEFAULT_KEYPAD","NOTE_PAD_KEYBOARD","groupByTag","payload","tag","data","Object","values","filter","reduce","finalPayload","val","Array","isArray","label","value","EstimationFieldType","getYearField","id","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","async","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","toString","validation","c","required","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","Service","getSessionDate","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","_defineComponent","__name","setup","__props","client","Client","nextField","givenNameField","person","first_name","Validation","isName","familyNameField","last_name","middleNameField","middle_name","genderField","sex","birthdateField","estimateDateFromAge","sessionDate","isEstimate","date_of_birth","birth_date_estimated","physicalAddressField","client_identifiers","physical_address","externalPatientNumberField","npid","searchResultsField","TT_PERSON_RESULT_VIEW","dynamicHelpText","res","getJson","ok","map","client_id","other","toastWarning","hiddenFooterBtns","footerBtns","slot","onClick","color","state","disabled","onValue","isEmpty","results","router","fields","onFinish","postJson","uuid","then","toastSuccess","error","catch","toastDanger","ClientError","GENERAL_ERROR","_ctx","_cache","_openBlock","_createBlock","TouchForm","skipSummary","activeField","__exports__"],"sourceRoot":""}