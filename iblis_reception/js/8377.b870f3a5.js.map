{"version":3,"file":"js/8377.b870f3a5.js","mappings":"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","sources":["webpack://IBLISReception/./src/components/Keyboard/HisKbConfigurations.ts","webpack://IBLISReception/./src/helpers/form/MonthOptions.ts","webpack://IBLISReception/./src/helpers/form/MultifieldDateHelper.ts","webpack://IBLISReception/./src/utils/Form.ts","webpack://IBLISReception/./src/views/FindOrRegister.vue?98b1","webpack://IBLISReception/./src/views/FindOrRegister.vue","webpack://IBLISReception/./src/views/FindOrRegister.vue?266c","webpack://IBLISReception/./node_modules/core-js/modules/es.iterator.every.js","webpack://IBLISReception/./node_modules/core-js/modules/esnext.iterator.every.js"],"sourcesContent":["/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"./MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean;\n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string | undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any, computeForm: any): void;\n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown = true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch (datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''\n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n\nfunction isLeapYear(year: number): boolean {\n    if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {\n        return true;\n    }\n    return false;\n}\n\nfunction handleLeapYear(year: number, month: number, day: number): number {\n    if (month === 2 && day === 29) {\n        if (isLeapYear(year)) {\n            return 29\n        } else {\n            return 28\n        }\n    } else {\n        return day\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n *\n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field\n * @param refDate\n * @returns\n */\nexport function generateDateFields(field: DateFieldInterface, refDate = ''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n\n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n\n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition\n        ? field.condition(f)\n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown\n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n\n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || Number(year) < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c))\n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && Number(year) > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of\n     * how data should appear on the summary\n     * @returns\n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText,\n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary,\n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val\n     * @returns\n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) => datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown' }]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            const year = f[yearID].value\n            const month = dayjs().format('MM')\n            const day = handleLeapYear(year, Number(month), Number(dayjs().format('DD')))\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f)\n\n    day.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' : appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = {\n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (!v) return [\"Age estimate is required\"]\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if (!`${v?.value}`.match(ageEstimateRegex)) {\n            return ['Not a valid age estimate']\n        }\n        const value = parseInt(`${v?.value || -1}`)\n        if (value < 0) {\n            return ['Please enter a valid number']\n        }\n        if (value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(value, 'years')\n            .year()\n        const month = dayjs().format('MM')\n        const day = handleLeapYear(year, Number(month), Number(dayjs().format('DD')))\n        fullDate = `${year}-${month}-${day}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    )\n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","/**\n * E.g. \n *  payload: {\n *      first_name: {\n *          person: \"Andrew\"\n *      },\n *      last_name: {\n *          person: \"Mfune\"\n *      },\n *      gender: {\n *          person: \"F\"\n *      }\n *  }\n * \n *  tag: \"person\"\n * \n *  result: {\n *      person: {\n *          first_name: \"Andrew\",\n *          last_name: \"Mfune\",\n *          gender: \"F\"\n *      }\n *  }\n * @param payload \n * @param tag \n * @returns \n */\nexport function groupByTag(payload: Record<string, any>, tag: string) {\n    const data = Object.values(Object.values(payload))\n    const values: any = data.filter((data: any) => {\n            return data[tag] ? true : false\n        })\n        .reduce((finalPayload: any, val: any) => {\n            if (Array.isArray(val[tag])) {\n                finalPayload[tag] = val[tag]\n            } else {\n                finalPayload[tag] = {...finalPayload[tag],...val[tag]} \n            }\n            return finalPayload\n        }, {})\n    return values\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ref } from \"vue\";\nimport { isEmpty } from \"lodash\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\"\nimport { EstimationFieldType, generateDateFields } from \"@/helpers/form/MultifieldDateHelper\"\nimport { groupByTag } from \"@/utils/Form\";\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'FindOrRegister',\n  setup(__props) {\n\nconst client = Client()\n\nconst nextField = ref('')\n\nconst givenNameField = () => {\n    return {\n        id: 'first_name',\n        helpText: 'First name',\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { first_name : val.value}\n        }),\n        options: async (f: any) => {\n            if (f.first_name?.value) {\n                const res = await client.getJson('clients/search_by_name', {\n                    first_name: f.first_name?.value\n                })\n                return res?.data.map((v: string) => ({ label: v, value: v }))\n            }\n            return []\n        },\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst familyNameField = () => {\n    return {\n        id: 'last_name',\n        helpText: \"Last name\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { last_name : val.value}\n        }),\n        options: async (f: any) => {\n            if (f.last_name?.value) {\n                const res = await client.getJson('clients/search_by_name', {\n                    last_name: f.last_name?.value\n                })\n                return res?.data.map((v: string) => ({ label: v, value: v }))\n            }\n            return []\n        },\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst middleNameField = () => {\n    return {\n        id: 'middle_name',\n        helpText: \"Middle name(Optional)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                person: { middle_name : val.value}\n            }\n        },\n    }\n}\n\nconst genderField = () => {\n    return  {\n        id: 'sex',\n        helpText: 'Gender',\n        type: FieldType.TT_SELECT,\n        computedValue: (val: Option) => ({\n            person: { sex : val.value}\n        }),\n        validation: (val: Option) => Validation.required(val),\n        options: () => ([\n            {\n                label: 'Female',\n                value: 'F'\n            },\n            {\n                label: 'Male',\n                value: 'M'\n            }\n        ])\n    }\n}\n\nconst birthdateField =  () => {\n    const config =  {\n        id: 'date_of_birth',\n        summaryLabel: 'Date of Birth',\n        helpText: 'Birth',\n        required: true,\n        minDate: () => HisDate.estimateDateFromAge(100),\n        maxDate: () => HisDate.sessionDate(),\n        estimation: {\n            allowUnknown: true,\n            allowUnknownMonthDay: true,\n            estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n        },\n        computeValue: (date: string, isEstimate: boolean) => {\n            return {\n                person: {\n                    date_of_birth: date,\n                    birth_date_estimated: isEstimate\n                }\n            }\n        }\n    }\n    return generateDateFields(config)\n}\n\nconst physicalAddressField = () => {\n    return {\n        id: \"physical_address\",\n        helpText: \"Physical address\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            client_identifiers: {\n                physical_address : val.value\n            }\n        }),\n        validation: (val: Option) => Validation.required(val)\n    }\n}\n\nconst externalPatientNumberField = () => {\n    return {\n        id: \"npid\",\n        helpText: \"External Patient Number (Option)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                client_identifiers: {\n                    npid: val?.value||''\n                }\n            }\n        }\n    }\n}\n\nconst searchResultsField = () => {\n    return {\n        id: 'results',\n        helpText: 'Search results',\n        type: FieldType.TT_PERSON_RESULT_VIEW,\n        dynamicHelpText: (form: any) => {\n            return `Search results for \"${form.first_name.value} ${form.last_name.value} | ${form.sex.label}\"`;\n        },\n        options: async (f: any) => {\n            const payload = {\n                'first_name': f.first_name.value,\n                'last_name': f.last_name.value,\n                'gender': f.sex.value\n            }\n            const res = await client.getJson('clients/search_dde', payload)\n            if (!res?.ok) {\n                toastWarning('Unable to find client')\n                return []\n            }\n            return res.data.map((person: any) => {\n                return {\n                    label: `${person.first_name} ${person.last_name} (${person.date_of_birth})`,\n                    value: person.client_id,\n                    other: {\n                        person,\n                        options: [\n                            { label: \"First name\", value: person.first_name},\n                            { label: \"Middle name\", value: person.middle_name},\n                            { label: \"Last name\", value: person.last_name},\n                            { label: \"Sex\", value: person.sex },\n                            { label: \"Birthdate\", value: person.date_of_birth},\n                            { label: \"Is birth estimated?\", value: person.birth_date_estimated  ? 'Yes' : 'No' }\n                        ]\n                    }\n                }\n            })\n        },\n        config: {\n            hiddenFooterBtns: [\n                'Clear',\n                'Next',\n                'Back',\n                'Finish'\n            ],\n            footerBtns: [\n                {\n                    name: 'Edit Search',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = 'first_name'\n                    }\n\n                },\n                {\n                    name: 'New Client',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = '_NEXT_FIELD_'\n                    }\n                },\n                {\n                    name: 'New Order',\n                    color: 'success',\n                    slot: 'end',\n                    state: {\n                        disabled: {\n                            default: () => true,\n                            onValue(_: any,form: any) {\n                                return isEmpty(form.results)\n                            }\n                        }\n                    },\n                    onClick: (form: any) => {\n                        return router.push(`/order/${form.results.value}`)\n                    }\n                }\n            ]\n        }\n    }\n}\n\nconst fields: Field[] = [\n    givenNameField(),\n    middleNameField(),\n    familyNameField(),\n    genderField(),\n    searchResultsField(),\n    ...birthdateField(),\n    physicalAddressField(),\n    externalPatientNumberField()\n]\n\nconst onFinish = (_: any, payload: any) => {\n    client.postJson('clients', {\n        client: { id: '', uuid: '' },\n        ...groupByTag(payload, 'person'),\n        ...groupByTag(payload, 'client_identifiers')\n    }).then(res => {\n        if (res?.ok) {\n            //TODO: Redirect to orders\n            router.push(`/order/${res.data.client_id}`)\n            return toastSuccess('Client created')\n        }\n        toastWarning(res?.error||'Unable to create')\n    }).catch(() => toastDanger(ClientError.GENERAL_ERROR))\n}\n\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(TouchForm, {\n    fields: fields,\n    onFinish: onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (nextField.value='')),\n    activeField: nextField.value\n  }, null, 8, [\"activeField\"]))\n}\n}\n\n})","<template>\n    <TouchForm\n        :fields=\"fields\"\n        :onFinish=\"onFinish\"\n        :skipSummary=\"true\"\n        @onIndex=\"nextField=''\"\n        :activeField=\"nextField\"/>\n</template>\n\n<script setup lang=\"ts\">\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { ref } from \"vue\";\nimport { isEmpty } from \"lodash\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\"\nimport { EstimationFieldType, generateDateFields } from \"@/helpers/form/MultifieldDateHelper\"\nimport { groupByTag } from \"@/utils/Form\";\n\nconst client = Client()\n\nconst nextField = ref('')\n\nconst givenNameField = () => {\n    return {\n        id: 'first_name',\n        helpText: 'First name',\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { first_name : val.value}\n        }),\n        options: async (f: any) => {\n            if (f.first_name?.value) {\n                const res = await client.getJson('clients/search_by_name', {\n                    first_name: f.first_name?.value\n                })\n                return res?.data.map((v: string) => ({ label: v, value: v }))\n            }\n            return []\n        },\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst familyNameField = () => {\n    return {\n        id: 'last_name',\n        helpText: \"Last name\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            person: { last_name : val.value}\n        }),\n        options: async (f: any) => {\n            if (f.last_name?.value) {\n                const res = await client.getJson('clients/search_by_name', {\n                    last_name: f.last_name?.value\n                })\n                return res?.data.map((v: string) => ({ label: v, value: v }))\n            }\n            return []\n        },\n        validation: (val: any) => Validation.isName(val),\n    }\n}\n\nconst middleNameField = () => {\n    return {\n        id: 'middle_name',\n        helpText: \"Middle name(Optional)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                person: { middle_name : val.value}\n            }\n        },\n    }\n}\n\nconst genderField = () => {\n    return  {\n        id: 'sex',\n        helpText: 'Gender',\n        type: FieldType.TT_SELECT,\n        computedValue: (val: Option) => ({\n            person: { sex : val.value}\n        }),\n        validation: (val: Option) => Validation.required(val),\n        options: () => ([\n            {\n                label: 'Female',\n                value: 'F'\n            },\n            {\n                label: 'Male',\n                value: 'M'\n            }\n        ])\n    }\n}\n\nconst birthdateField =  () => {\n    const config =  {\n        id: 'date_of_birth',\n        summaryLabel: 'Date of Birth',\n        helpText: 'Birth',\n        required: true,\n        minDate: () => HisDate.estimateDateFromAge(100),\n        maxDate: () => HisDate.sessionDate(),\n        estimation: {\n            allowUnknown: true,\n            allowUnknownMonthDay: true,\n            estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n        },\n        computeValue: (date: string, isEstimate: boolean) => {\n            return {\n                person: {\n                    date_of_birth: date,\n                    birth_date_estimated: isEstimate\n                }\n            }\n        }\n    }\n    return generateDateFields(config)\n}\n\nconst physicalAddressField = () => {\n    return {\n        id: \"physical_address\",\n        helpText: \"Physical address\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => ({\n            client_identifiers: {\n                physical_address : val.value\n            }\n        }),\n        validation: (val: Option) => Validation.required(val)\n    }\n}\n\nconst externalPatientNumberField = () => {\n    return {\n        id: \"npid\",\n        helpText: \"External Patient Number (Option)\",\n        type: FieldType.TT_TEXT,\n        computedValue: (val: Option) => {\n            if (!val) return\n            return {\n                client_identifiers: {\n                    npid: val?.value||''\n                }\n            }\n        }\n    }\n}\n\nconst searchResultsField = () => {\n    return {\n        id: 'results',\n        helpText: 'Search results',\n        type: FieldType.TT_PERSON_RESULT_VIEW,\n        dynamicHelpText: (form: any) => {\n            return `Search results for \"${form.first_name.value} ${form.last_name.value} | ${form.sex.label}\"`;\n        },\n        options: async (f: any) => {\n            const payload = {\n                'first_name': f.first_name.value,\n                'last_name': f.last_name.value,\n                'gender': f.sex.value\n            }\n            const res = await client.getJson('clients/search_dde', payload)\n            if (!res?.ok) {\n                toastWarning('Unable to find client')\n                return []\n            }\n            return res.data.map((person: any) => {\n                return {\n                    label: `${person.first_name} ${person.last_name} (${person.date_of_birth})`,\n                    value: person.client_id,\n                    other: {\n                        person,\n                        options: [\n                            { label: \"First name\", value: person.first_name},\n                            { label: \"Middle name\", value: person.middle_name},\n                            { label: \"Last name\", value: person.last_name},\n                            { label: \"Sex\", value: person.sex },\n                            { label: \"Birthdate\", value: person.date_of_birth},\n                            { label: \"Is birth estimated?\", value: person.birth_date_estimated  ? 'Yes' : 'No' }\n                        ]\n                    }\n                }\n            })\n        },\n        config: {\n            hiddenFooterBtns: [\n                'Clear',\n                'Next',\n                'Back',\n                'Finish'\n            ],\n            footerBtns: [\n                {\n                    name: 'Edit Search',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = 'first_name'\n                    }\n\n                },\n                {\n                    name: 'New Client',\n                    slot: 'end',\n                    onClick: () => {\n                        nextField.value = '_NEXT_FIELD_'\n                    }\n                },\n                {\n                    name: 'New Order',\n                    color: 'success',\n                    slot: 'end',\n                    state: {\n                        disabled: {\n                            default: () => true,\n                            onValue(_: any,form: any) {\n                                return isEmpty(form.results)\n                            }\n                        }\n                    },\n                    onClick: (form: any) => {\n                        return router.push(`/order/${form.results.value}`)\n                    }\n                }\n            ]\n        }\n    }\n}\n\nconst fields: Field[] = [\n    givenNameField(),\n    middleNameField(),\n    familyNameField(),\n    genderField(),\n    searchResultsField(),\n    ...birthdateField(),\n    physicalAddressField(),\n    externalPatientNumberField()\n]\n\nconst onFinish = (_: any, payload: any) => {\n    client.postJson('clients', {\n        client: { id: '', uuid: '' },\n        ...groupByTag(payload, 'person'),\n        ...groupByTag(payload, 'client_identifiers')\n    }).then(res => {\n        if (res?.ok) {\n            //TODO: Redirect to orders\n            router.push(`/order/${res.data.client_id}`)\n            return toastSuccess('Client created')\n        }\n        toastWarning(res?.error||'Unable to create')\n    }).catch(() => toastDanger(ClientError.GENERAL_ERROR))\n}\n\n</script>\n","import script from \"./FindOrRegister.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./FindOrRegister.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.every` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.every\n$({ target: 'Iterator', proto: true, real: true }, {\n  every: function every(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return !iterate(record, function (value, stop) {\n      if (!predicate(value, counter++)) return stop();\n    }, { IS_RECORD: true, INTERRUPTED: true }).stopped;\n  }\n});\n","'use strict';\n// TODO: Remove from `core-js@4`\nrequire('../modules/es.iterator.every');\n"],"names":["SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","label","value","EstimationFieldType","getYearField","id","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","async","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","isLeapYear","handleLeapYear","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","data","proxyID","unload","v","toString","validation","c","required","StandardValidations","match","isNaN","Number","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","dayjs","format","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","Service","getSessionDate","subtract","AGE_ESTIMATE_FIELD","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","groupByTag","payload","tag","Object","values","filter","finalPayload","Array","isArray","_defineComponent","__name","setup","__props","client","Client","nextField","givenNameField","person","first_name","_f$first_name","_f$first_name2","res","getJson","map","Validation","isName","familyNameField","last_name","_f$last_name","_f$last_name2","middleNameField","middle_name","genderField","sex","birthdateField","estimateDateFromAge","sessionDate","isEstimate","date_of_birth","birth_date_estimated","physicalAddressField","client_identifiers","physical_address","externalPatientNumberField","npid","searchResultsField","TT_PERSON_RESULT_VIEW","dynamicHelpText","ok","client_id","other","toastWarning","hiddenFooterBtns","footerBtns","slot","onClick","color","state","disabled","onValue","isEmpty","results","router","fields","onFinish","postJson","uuid","then","toastSuccess","error","catch","toastDanger","ClientError","GENERAL_ERROR","_ctx","_cache","_openBlock","_createBlock","TouchForm","skipSummary","onOnIndex","$event","activeField","__exports__","$","iterate","aCallable","anObject","getIteratorDirect","target","proto","real","predicate","this","record","counter","stop","IS_RECORD","INTERRUPTED","stopped"],"sourceRoot":""}