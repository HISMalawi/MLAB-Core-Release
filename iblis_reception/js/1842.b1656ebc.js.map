{"version":3,"file":"js/1842.b1656ebc.js","mappings":"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","sources":["webpack://IBLISReception/./src/components/Keyboard/HisKbConfigurations.ts","webpack://IBLISReception/./src/helpers/form/MonthOptions.ts","webpack://IBLISReception/./src/helpers/form/MultifieldDateHelper.ts","webpack://IBLISReception/./src/utils/Form.ts","webpack://IBLISReception/./src/views/EditClient.vue?4986","webpack://IBLISReception/./src/views/EditClient.vue","webpack://IBLISReception/./src/views/EditClient.vue?cf18","webpack://IBLISReception/./node_modules/core-js/modules/es.iterator.every.js","webpack://IBLISReception/./node_modules/core-js/modules/esnext.iterator.every.js"],"sourcesContent":["/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"./MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\",\n    WEEKS_ESTIAMATE_FIELD = \"weeks-period-estimate-field\",\n    DAY_ESTIMATE_FIELD = \"day-period-estimate-field\",\n    HOURS_ESTIMATE_FIELD = \"hours-period-estimate-field\",\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean;\n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string | undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any, computeForm: any): void;\n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown = true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\ninterface TimeEstimate {\n    value: number;\n    timeUnit: 'hours' | 'days' | 'weeks' | 'months' | 'years';\n}\n\nexport function calculateEstimatedDate(estimate: TimeEstimate): string {\n    const { value, timeUnit } = estimate;\n    \n    if (value < 0) {\n        throw new Error('Estimate value must be positive');\n    }\n\n    const sessionDate = Service.getSessionDate();\n    let estimatedDate = dayjs(sessionDate);\n\n    switch (timeUnit.toLowerCase()) {\n        case 'hours':\n            estimatedDate = estimatedDate.subtract(value, 'hour');\n            break;\n        case 'days':\n            estimatedDate = estimatedDate.subtract(value, 'day');\n            break;\n        case 'weeks':\n            estimatedDate = estimatedDate.subtract(value, 'week');\n            break;\n        case 'months':\n            estimatedDate = estimatedDate.subtract(value, 'month');\n            break;\n        case 'years':\n            estimatedDate = estimatedDate.subtract(value, 'year');\n            break;\n        default:\n            throw new Error(`Invalid time unit: ${timeUnit}`);\n    }\n\n    const year = estimatedDate.year();\n    const month = estimatedDate.month() + 1;\n    const day = estimatedDate.date();\n    \n    const adjustedDay = handleLeapYear(year, month, day);\n    if (adjustedDay !== day) {\n        estimatedDate = estimatedDate.date(adjustedDay);\n    }\n\n    return estimatedDate.format(STANDARD_DATE_FORMAT);\n}\n\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_AGE_INPUT,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch (datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''\n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n\nfunction isLeapYear(year: number): boolean {\n    if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {\n        return true;\n    }\n    return false;\n}\n\nfunction handleLeapYear(year: number, month: number, day: number): number {\n    if (month === 2 && day === 29) {\n        if (isLeapYear(year)) {\n            return 29\n        } else {\n            return 28\n        }\n    } else {\n        return day\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n *\n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field\n * @param refDate\n * @returns\n */\nexport function generateDateFields(field: DateFieldInterface, refDate = ''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n\n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n\n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition\n        ? field.condition(f)\n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown\n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n\n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || Number(year) < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c))\n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && Number(year) > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of\n     * how data should appear on the summary\n     * @returns\n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText,\n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary,\n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val\n     * @returns\n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) => datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown' }]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            const year = f[yearID].value\n            const month = dayjs().format('MM')\n            const day = handleLeapYear(year, Number(month), Number(dayjs().format('DD')))\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f)\n\n    day.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' : appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = {\n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    const TIME_UNIT_TO_YEARS = {\n        weeks: 1 / 52,\n        months: 1 / 12,\n        days: 1 / 365,\n        hours: 1 / (365 * 24),\n        years: 1\n    } as const;\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (!v) return [\"Age estimate is required\"];\n    \n        const value = v?.other?.value;\n        const timeUnit = v?.other?.timeUnit?.toLowerCase();\n    \n        if (!value || !timeUnit) {\n            return [\"Invalid age estimate format\"];\n        }\n    \n        const numberRegex = /^(0|[1-9]\\d*)$/;\n        if (!value.match(numberRegex)) {\n            return [\"Not a valid number\"];\n        }\n    \n        try {\n            const numericValue = parseInt(value);\n            fullDate = calculateEstimatedDate({\n                value: numericValue,\n                timeUnit: timeUnit as TimeEstimate['timeUnit']\n            });\n            \n            return validateMinMax(fullDate, field, f, c);\n        } catch (error) {\n            return [(error as Error).message];\n        }\n    };\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    )\n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext\n            ? true\n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","/**\n * E.g. \n *  payload: {\n *      first_name: {\n *          person: \"Andrew\"\n *      },\n *      last_name: {\n *          person: \"Mfune\"\n *      },\n *      gender: {\n *          person: \"F\"\n *      }\n *  }\n * \n *  tag: \"person\"\n * \n *  result: {\n *      person: {\n *          first_name: \"Andrew\",\n *          last_name: \"Mfune\",\n *          gender: \"F\"\n *      }\n *  }\n * @param payload \n * @param tag \n * @returns \n */\nexport function groupByTag(payload: Record<string, any>, tag: string) {\n    const data = Object.values(Object.values(payload))\n    const values: any = data.filter((data: any) => {\n            return data[tag] ? true : false\n        })\n        .reduce((finalPayload: any, val: any) => {\n            if (Array.isArray(val[tag])) {\n                finalPayload[tag] = val[tag]\n            } else {\n                finalPayload[tag] = {...finalPayload[tag],...val[tag]} \n            }\n            return finalPayload\n        }, {})\n    return values\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { onMounted, ref } from \"vue\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/helpers/form/MultifieldDateHelper\";\nimport { groupByTag } from \"@/utils/Form\";\nimport { useRoute } from \"vue-router\";\n\n\nexport default /*@__PURE__*/_defineComponent({\n  __name: 'EditClient',\n  setup(__props) {\n\nconst client = Client();\nconst route = useRoute();\nconst nextField = ref(\"\");\nconst details = ref<any>({});\nconst fields = ref<Field[]>([]);\n\nconst givenNameField = () => {\n  return {\n    id: \"first_name\",\n    helpText: \"First name\",\n    type: FieldType.TT_TEXT,\n    defaultValue: () => details.value.first_name,\n    computedValue: (val: Option) => ({\n      person: { first_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst familyNameField = () => {\n  return {\n    id: \"last_name\",\n    helpText: \"Last name\",\n    defaultValue: () => details.value.last_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      person: { last_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst middleNameField = () => {\n  return {\n    id: \"middle_name\",\n    helpText: \"Middle name(Optional)\",\n    defaultValue: () => details.value.middle_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        person: { middle_name: val.value },\n      };\n    },\n  };\n};\n\nconst genderField = () => {\n  return {\n    id: \"sex\",\n    helpText: \"Gender\",\n    defaultValue: () => (details.value.sex == \"F\" ? \"Female\" : \"Male\"),\n    type: FieldType.TT_SELECT,\n    computedValue: (val: Option) => ({\n      person: { sex: val.value },\n    }),\n    validation: (val: Option) => Validation.required(val),\n    options: () => [\n      {\n        label: \"Female\",\n        value: \"F\",\n      },\n      {\n        label: \"Male\",\n        value: \"M\",\n      },\n    ],\n  };\n};\n\nconst birthdateField = () => {\n  const config = {\n    id: \"date_of_birth\",\n    summaryLabel: \"Date of Birth\",\n    helpText: \"Birth\",\n    defaultValue: () => details.value.date_of_birth,\n    required: true,\n    minDate: () => HisDate.estimateDateFromAge(100),\n    maxDate: () => HisDate.sessionDate(),\n    estimation: {\n      allowUnknown: true,\n      allowUnknownMonthDay: true,\n      estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD,\n    },\n    computeValue: (date: string, isEstimate: boolean) => {\n      return {\n        person: {\n          date_of_birth: date,\n          birth_date_estimated: isEstimate,\n        },\n      };\n    },\n  };\n  return generateDateFields(config);\n};\n\nconst physicalAddressField = () => {\n  return {\n    id: \"physical_address\",\n    helpText: \"Physical address\",\n    defaultValue: () =>\n      details.value.physical_address\n        ? details.value.physical_address\n        : \"Unknown\",\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      client_identifiers: {\n        physical_address: val.value,\n      },\n    }),\n    validation: (val: Option) => Validation.required(val),\n  };\n};\n\nconst externalPatientNumberField = () => {\n  return {\n    id: \"npid\",\n    helpText: \"External Patient Number (Option)\",\n    defaultValue: () => details.value.uuid,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        client_identifiers: {\n          npid: val?.value || \"\",\n        },\n      };\n    },\n  };\n};\n\nconst onFinish = (_: any, payload: any) => {\n  client\n    .putJson(`clients/${route.params.client_id}`, {\n      client: { id: route.params.client_id, uuid: details.value.uuid },\n      ...groupByTag(payload, \"person\"),\n      client_identifiers: [payload]\n    })\n    .then((res) => {\n      if (res?.ok) {\n        router.back();\n        return toastSuccess(\"Client updated successfully!\");\n      }\n      toastWarning(res?.error || \"An error occurred, please try again\");\n    })\n    .catch(() => toastDanger(ClientError.GENERAL_ERROR));\n};\n\nconst getClient = async () => {\n  const res = await client.getJson(`clients/${route.params.client_id}`);\n  details.value = res?.data;\n  if (res?.data) {\n    fields.value = [\n      givenNameField(),\n      middleNameField(),\n      familyNameField(),\n      genderField(),\n      ...birthdateField(),\n      physicalAddressField(),\n      externalPatientNumberField(),\n    ];\n  }\n};\n\nonMounted(async () => {\n  await getClient();\n});\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(TouchForm, {\n    fields: fields.value,\n    onFinish: onFinish,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (nextField.value = '')),\n    activeField: nextField.value\n  }, null, 8, [\"fields\", \"activeField\"]))\n}\n}\n\n})","<template>\n  <TouchForm\n    :fields=\"fields\"\n    :onFinish=\"onFinish\"\n    :skipSummary=\"true\"\n    @onIndex=\"nextField = ''\"\n    :activeField=\"nextField\"\n  />\n</template>\n\n<script setup lang=\"ts\">\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport TouchForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { Client, ClientError } from \"@/composables/client\";\nimport { toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { onMounted, ref } from \"vue\";\nimport router from \"@/router\";\nimport HisDate from \"@/utils/Date\";\nimport {\n  EstimationFieldType,\n  generateDateFields,\n} from \"@/helpers/form/MultifieldDateHelper\";\nimport { groupByTag } from \"@/utils/Form\";\nimport { useRoute } from \"vue-router\";\n\nconst client = Client();\nconst route = useRoute();\nconst nextField = ref(\"\");\nconst details = ref<any>({});\nconst fields = ref<Field[]>([]);\n\nconst givenNameField = () => {\n  return {\n    id: \"first_name\",\n    helpText: \"First name\",\n    type: FieldType.TT_TEXT,\n    defaultValue: () => details.value.first_name,\n    computedValue: (val: Option) => ({\n      person: { first_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst familyNameField = () => {\n  return {\n    id: \"last_name\",\n    helpText: \"Last name\",\n    defaultValue: () => details.value.last_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      person: { last_name: val.value },\n    }),\n    validation: (val: any) => Validation.isName(val),\n  };\n};\n\nconst middleNameField = () => {\n  return {\n    id: \"middle_name\",\n    helpText: \"Middle name(Optional)\",\n    defaultValue: () => details.value.middle_name,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        person: { middle_name: val.value },\n      };\n    },\n  };\n};\n\nconst genderField = () => {\n  return {\n    id: \"sex\",\n    helpText: \"Gender\",\n    defaultValue: () => (details.value.sex == \"F\" ? \"Female\" : \"Male\"),\n    type: FieldType.TT_SELECT,\n    computedValue: (val: Option) => ({\n      person: { sex: val.value },\n    }),\n    validation: (val: Option) => Validation.required(val),\n    options: () => [\n      {\n        label: \"Female\",\n        value: \"F\",\n      },\n      {\n        label: \"Male\",\n        value: \"M\",\n      },\n    ],\n  };\n};\n\nconst birthdateField = () => {\n  const config = {\n    id: \"date_of_birth\",\n    summaryLabel: \"Date of Birth\",\n    helpText: \"Birth\",\n    defaultValue: () => details.value.date_of_birth,\n    required: true,\n    minDate: () => HisDate.estimateDateFromAge(100),\n    maxDate: () => HisDate.sessionDate(),\n    estimation: {\n      allowUnknown: true,\n      allowUnknownMonthDay: true,\n      estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD,\n    },\n    computeValue: (date: string, isEstimate: boolean) => {\n      return {\n        person: {\n          date_of_birth: date,\n          birth_date_estimated: isEstimate,\n        },\n      };\n    },\n  };\n  return generateDateFields(config);\n};\n\nconst physicalAddressField = () => {\n  return {\n    id: \"physical_address\",\n    helpText: \"Physical address\",\n    defaultValue: () =>\n      details.value.physical_address\n        ? details.value.physical_address\n        : \"Unknown\",\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => ({\n      client_identifiers: {\n        physical_address: val.value,\n      },\n    }),\n    validation: (val: Option) => Validation.required(val),\n  };\n};\n\nconst externalPatientNumberField = () => {\n  return {\n    id: \"npid\",\n    helpText: \"External Patient Number (Option)\",\n    defaultValue: () => details.value.uuid,\n    type: FieldType.TT_TEXT,\n    computedValue: (val: Option) => {\n      if (!val) return;\n      return {\n        client_identifiers: {\n          npid: val?.value || \"\",\n        },\n      };\n    },\n  };\n};\n\nconst onFinish = (_: any, payload: any) => {\n  client\n    .putJson(`clients/${route.params.client_id}`, {\n      client: { id: route.params.client_id, uuid: details.value.uuid },\n      ...groupByTag(payload, \"person\"),\n      client_identifiers: [payload]\n    })\n    .then((res) => {\n      if (res?.ok) {\n        router.back();\n        return toastSuccess(\"Client updated successfully!\");\n      }\n      toastWarning(res?.error || \"An error occurred, please try again\");\n    })\n    .catch(() => toastDanger(ClientError.GENERAL_ERROR));\n};\n\nconst getClient = async () => {\n  const res = await client.getJson(`clients/${route.params.client_id}`);\n  details.value = res?.data;\n  if (res?.data) {\n    fields.value = [\n      givenNameField(),\n      middleNameField(),\n      familyNameField(),\n      genderField(),\n      ...birthdateField(),\n      physicalAddressField(),\n      externalPatientNumberField(),\n    ];\n  }\n};\n\nonMounted(async () => {\n  await getClient();\n});\n</script>\n","import script from \"./EditClient.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./EditClient.vue?vue&type=script&setup=true&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","'use strict';\nvar $ = require('../internals/export');\nvar iterate = require('../internals/iterate');\nvar aCallable = require('../internals/a-callable');\nvar anObject = require('../internals/an-object');\nvar getIteratorDirect = require('../internals/get-iterator-direct');\n\n// `Iterator.prototype.every` method\n// https://tc39.es/ecma262/#sec-iterator.prototype.every\n$({ target: 'Iterator', proto: true, real: true }, {\n  every: function every(predicate) {\n    anObject(this);\n    aCallable(predicate);\n    var record = getIteratorDirect(this);\n    var counter = 0;\n    return !iterate(record, function (value, stop) {\n      if (!predicate(value, counter++)) return stop();\n    }, { IS_RECORD: true, INTERRUPTED: true }).stopped;\n  }\n});\n","'use strict';\n// TODO: Remove from `core-js@4`\nrequire('../modules/es.iterator.every');\n"],"names":["SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","label","value","EstimationFieldType","getYearField","id","name","showUnknown","primaryFunctions","push","helpText","appearInSummary","type","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","calculateEstimatedDate","estimate","timeUnit","Error","sessionDate","Service","getSessionDate","estimatedDate","dayjs","toLowerCase","subtract","year","month","day","date","adjustedDay","handleLeapYear","format","STANDARD_DATE_FORMAT","getMonthDurationEstimateField","getAgeEstimateField","TT_AGE_INPUT","keypad","appendLeadingZero","s","parseInt","async","getDefaultDate","form","field","datePart","defaultValue","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","minDate","min","Date","maxDate","max","isLeapYear","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","condition","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","data","proxyID","unload","v","toString","validation","c","required","StandardValidations","match","isNaN","Number","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","_v$other","_v$other2","other","numberRegex","numericValue","error","message","AGE_ESTIMATE_FIELD","MONTH_ESTIMATE_FIELD","groupByTag","payload","tag","Object","values","filter","finalPayload","Array","isArray","_defineComponent","__name","setup","__props","client","Client","route","useRoute","nextField","details","fields","givenNameField","first_name","person","Validation","isName","familyNameField","last_name","middleNameField","middle_name","genderField","sex","birthdateField","date_of_birth","estimateDateFromAge","isEstimate","birth_date_estimated","physicalAddressField","physical_address","client_identifiers","externalPatientNumberField","uuid","npid","onFinish","putJson","params","client_id","then","res","ok","router","back","toastSuccess","toastWarning","catch","toastDanger","ClientError","GENERAL_ERROR","getClient","getJson","onMounted","_ctx","_cache","_openBlock","_createBlock","TouchForm","skipSummary","onOnIndex","$event","activeField","__exports__","$","iterate","aCallable","anObject","getIteratorDirect","target","proto","real","predicate","this","record","counter","stop","IS_RECORD","INTERRUPTED","stopped"],"sourceRoot":""}