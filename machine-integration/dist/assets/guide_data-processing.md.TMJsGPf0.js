import{_ as e,c as a,o as t,a4 as r}from"./chunks/framework.CFbAc5Z6.js";const u=JSON.parse('{"title":"Data Processing","description":"","frontmatter":{},"headers":[],"relativePath":"guide/data-processing.md","filePath":"guide/data-processing.md"}'),i={name:"guide/data-processing.md"},s=r('<h1 id="data-processing" tabindex="-1">Data Processing <a class="header-anchor" href="#data-processing" aria-label="Permalink to &quot;Data Processing&quot;">​</a></h1><h2 id="handling-data" tabindex="-1">Handling Data <a class="header-anchor" href="#handling-data" aria-label="Permalink to &quot;Handling Data&quot;">​</a></h2><p>A connection must be established between a machine and the driver in order to receive data. This can be done using the established communication methods described in the setup guide. A socket listener is implemented to receive incoming data packets over TCP/IP or serial streams. Once data is received from the machine, it needs to be processed before sending it to the server. This involves the following processes:</p><h2 id="getting-data" tabindex="-1">Getting Data <a class="header-anchor" href="#getting-data" aria-label="Permalink to &quot;Getting Data&quot;">​</a></h2><p>A machine spits data once a test has been completed or through manual transmission (selecting the specific tests or sequence via test id&#39;s) or Exporting. Most of this data comes in Binary or Buffer formats. This raw data is manipulated to extract required parameters using the mapping schema.</p><h2 id="mapping-parameters" tabindex="-1">Mapping Parameters <a class="header-anchor" href="#mapping-parameters" aria-label="Permalink to &quot;Mapping Parameters&quot;">​</a></h2><p>Involves mapping out parameters that are required from the raw data received. For example extracting patient id, test name, result value etc. Most of the drivers (especially for Hematology and Biochemistry machines) use a JSON schema in a file for example <code>mapping.json</code> to define the expected format of the data.</p><h2 id="extracting-data" tabindex="-1">Extracting Data <a class="header-anchor" href="#extracting-data" aria-label="Permalink to &quot;Extracting Data&quot;">​</a></h2><p>Data is extracted from the raw data stings/buffers received using a regular expression parser to match patterns defined. Some of these <code>regular expressions/regex</code> are generic and some are written within the driver file and are not global throughout the drivers.</p>',9),n=[s];function o(d,c,h,p,l,m){return t(),a("div",null,n)}const f=e(i,[["render",o]]);export{u as __pageData,f as default};
