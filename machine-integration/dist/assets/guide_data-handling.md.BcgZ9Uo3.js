import{_ as l,c as r,j as e,a as t,b as d,w as n,a3 as o,B as u,o as s,G as m}from"./chunks/framework.XPCTOXrd.js";const I=JSON.parse('{"title":"LIS Data Handling","description":"","frontmatter":{},"headers":[],"relativePath":"guide/data-handling.md","filePath":"guide/data-handling.md"}'),p={name:"guide/data-handling.md"};function h(c,a,f,g,v,S){const i=u("Mermaid");return s(),r("div",null,[a[1]||(a[1]=e("h1",{id:"lis-data-handling",tabindex:"-1"},[t("LIS Data Handling "),e("a",{class:"header-anchor",href:"#lis-data-handling","aria-label":'Permalink to "LIS Data Handling"'},"â€‹")],-1)),a[2]||(a[2]=e("p",null,"In our context, IBLIS is the LIS that receives data from various machine drivers. Upon receiving data, IBLIS performs the following functions:",-1)),a[3]||(a[3]=e("ol",null,[e("li",null,"Creates a JSON file using the accession number received (if already present it skips this)"),e("li",null,"Parses the params and queries of the API an dumps test(s) and their results into the JSON file"),e("li",null,"Appends data from step 2 if there are more than one tests available under the same accession number"),e("li",null,"Updates the fetch results button in the system enter test results section to indicate new results are available"),e("li",null,"On fetch, the results are populated and the user can save")],-1)),(s(),d(o,null,{default:n(()=>[m(i,{id:"mermaid-33",class:"mermaid",graph:"graph%20LR%3B%0A%20%20JSON%20--%3E%20Fetching%20--%3E%20Database%3B%0A"})]),fallback:n(()=>a[0]||(a[0]=[t(" Loading... ")])),_:1}))])}const B=l(p,[["render",h]]);export{I as __pageData,B as default};
