import { defineComponent as i, openBlock as m, createElementBlock as p, renderSlot as u, createElementVNode as $ } from "vue";
const v = i({
  props: {
    element: {
      required: !0,
      type: String
    },
    filename: {
      required: !0,
      type: String
    }
  },
  methods: {
    exportToWord(e, t = "") {
      var l;
      var o = "<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'><head><meta charset='utf-8'><title>Export HTML To Doc</title></head><body>", r = "</body></html>", s = o + ((l = document.getElementById(e)) == null ? void 0 : l.innerHTML) + r, d = "data:application/vnd.ms-word;charset=utf-8," + encodeURIComponent(s);
      t = t ? t + ".doc" : "document.doc";
      var n = document.createElement("a");
      document.body.appendChild(n), n.href = d, n.download = t, n.click(), document.body.removeChild(n);
    }
  }
}), f = (e, t) => {
  const o = e.__vccOpts || e;
  for (const [r, s] of t)
    o[r] = s;
  return o;
};
function y(e, t, o, r, s, d) {
  return m(), p("div", {
    ref: "exportToWord",
    onClick: t[0] || (t[0] = (n) => e.exportToWord(e.element, e.filename))
  }, [
    u(e.$slots, "default")
  ], 512);
}
const w = /* @__PURE__ */ f(v, [["render", y]]), T = i({
  props: {
    element: {
      type: String,
      required: !0
    },
    filename: {
      type: String,
      required: !0
    }
  },
  methods: {
    createSlug(e) {
      return `${e.trim().toLowerCase().replace(/[\s\W-]+/g, "-").replace(/^-+|-+$/g, "")}`;
    },
    exportToCsv(e, t) {
      const o = document.getElementById(e);
      if (!o) {
        console.error(`Table with ID '${e}' not found.`);
        return;
      }
      let r = "data:text/csv;charset=utf-8,";
      const s = Array.from(o.querySelectorAll("thead th")).map((c) => `"${c.textContent.trim()}"`).join(",");
      r += `${s}
`;
      const n = Array.from(o.querySelectorAll("tbody tr")).map((c) => Array.from(c.querySelectorAll("td")).map((h) => `"${h.textContent.trim()}"`).join(","));
      r += `${n.join(`
`)}
`;
      const l = encodeURI(r), a = document.createElement("a");
      a.setAttribute("href", l), a.setAttribute("download", `${this.createSlug(t)}.csv`), a.click();
    }
  }
});
function C(e, t, o, r, s, d) {
  return m(), p("div", null, [
    $("div", {
      ref: "exportToCsv",
      onClick: t[0] || (t[0] = (n) => e.exportToCsv(e.element, e.filename))
    }, [
      u(e.$slots, "default")
    ], 512)
  ]);
}
const E = /* @__PURE__ */ f(T, [["render", C]]), b = i({
  props: {
    element: {
      required: !0,
      type: String
    },
    filename: {
      required: !0,
      type: String
    }
  },
  methods: {
    exportTableToExcel(e, t) {
      const o = document.getElementById(e);
      if (!o) {
        console.error(`Table with ID '${e}' not found.`);
        return;
      }
      const r = o.outerHTML, n = `data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,${btoa(r)}`, l = document.createElement("a");
      l.href = n, l.download = t, l.target = "_blank", l.style.display = "none", document.body.appendChild(l), l.click(), document.body.removeChild(l);
    }
  }
});
function g(e, t, o, r, s, d) {
  return m(), p("div", null, [
    $("div", {
      ref: "exportToCsv",
      onClick: t[0] || (t[0] = (n) => e.exportTableToExcel(e.element, e.filename))
    }, [
      u(e.$slots, "default")
    ], 512)
  ]);
}
const k = /* @__PURE__ */ f(b, [["render", g]]);
export {
  E as ExportToCsv,
  k as ExportToExcel,
  w as ExportToWord
};
